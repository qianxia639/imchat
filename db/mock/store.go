// Code generated by MockGen. DO NOT EDIT.
// Source: IMChat/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	db "IMChat/db/sqlc"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddContact mocks base method.
func (m *MockStore) AddContact(arg0 context.Context, arg1 db.AddContactParams) (db.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContact", arg0, arg1)
	ret0, _ := ret[0].(db.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddContact indicates an expected call of AddContact.
func (mr *MockStoreMockRecorder) AddContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContact", reflect.TypeOf((*MockStore)(nil).AddContact), arg0, arg1)
}

// AddContactTx mocks base method.
func (m *MockStore) AddContactTx(arg0 context.Context, arg1 db.AddContactTxParams) (db.AddContactxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContactTx", arg0, arg1)
	ret0, _ := ret[0].(db.AddContactxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddContactTx indicates an expected call of AddContactTx.
func (mr *MockStoreMockRecorder) AddContactTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContactTx", reflect.TypeOf((*MockStore)(nil).AddContactTx), arg0, arg1)
}

// AddExamine mocks base method.
func (m *MockStore) AddExamine(arg0 context.Context, arg1 db.AddExamineParams) (db.Examine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExamine", arg0, arg1)
	ret0, _ := ret[0].(db.Examine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddExamine indicates an expected call of AddExamine.
func (mr *MockStoreMockRecorder) AddExamine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExamine", reflect.TypeOf((*MockStore)(nil).AddExamine), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteExamine mocks base method.
func (m *MockStore) DeleteExamine(arg0 context.Context, arg1 db.DeleteExamineParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExamine", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExamine indicates an expected call of DeleteExamine.
func (mr *MockStoreMockRecorder) DeleteExamine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExamine", reflect.TypeOf((*MockStore)(nil).DeleteExamine), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetExamine mocks base method.
func (m *MockStore) GetExamine(arg0 context.Context, arg1 int64) ([]db.Examine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExamine", arg0, arg1)
	ret0, _ := ret[0].([]db.Examine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExamine indicates an expected call of GetExamine.
func (mr *MockStoreMockRecorder) GetExamine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExamine", reflect.TypeOf((*MockStore)(nil).GetExamine), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// LoginUser mocks base method.
func (m *MockStore) LoginUser(arg0 context.Context, arg1 db.LoginUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockStoreMockRecorder) LoginUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockStore)(nil).LoginUser), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
