// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: examine.sql

package db

import (
	"context"
)

const addExamine = `-- name: AddExamine :one
INSERT INTO examine (
    owner_id, target_id
) VALUES (
    $1, $2
)
RETURNING owner_id, target_id, created_at
`

type AddExamineParams struct {
	OwnerID  int64 `json:"owner_id"`
	TargetID int64 `json:"target_id"`
}

func (q *Queries) AddExamine(ctx context.Context, arg AddExamineParams) (Examine, error) {
	row := q.db.QueryRowContext(ctx, addExamine, arg.OwnerID, arg.TargetID)
	var i Examine
	err := row.Scan(&i.OwnerID, &i.TargetID, &i.CreatedAt)
	return i, err
}

const deleteExamine = `-- name: DeleteExamine :exec
DELETE FROM examine WHERE owner_id = $1
`

func (q *Queries) DeleteExamine(ctx context.Context, ownerID int64) error {
	_, err := q.db.ExecContext(ctx, deleteExamine, ownerID)
	return err
}

const getExamine = `-- name: GetExamine :many
SELECT owner_id, target_id, created_at FROM examine
WHERE owner_id = $1
`

func (q *Queries) GetExamine(ctx context.Context, ownerID int64) ([]Examine, error) {
	rows, err := q.db.QueryContext(ctx, getExamine, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Examine{}
	for rows.Next() {
		var i Examine
		if err := rows.Scan(&i.OwnerID, &i.TargetID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
